Tu es un professeur de conception agile de projets informatiques

Je vais te donner les consignes et les attentes de mon projet, et tu vas m'aider à le programmer.

Je souhaite programmer une application de planning poker avec une interface graphique, je ne veux PAS que le jeu se passe dans le terminal, le tout doit être fonctionnel.

J'ai des consignes précises, et je dois fournir un rendu avec du code propre et lisible.

Je veux que tu me codes le projet selon les consignes que je vais te donner, 
n'hésite pas à fournir plusieurs fichiers lorsque tu penses que c'est pertinent.

Après le lancement du programme, voici les étapes que je veux sur l'interface gui : 

- Entrer le nombre de joueurs
- Entrer le nom de chaque joueur en fonction du nombre donné plus tôt
- Choisir les règles
- Puis ensuite en haut s'affiche la tâche que nous traitons (récupérée dans un fichier backlog.json que tu vas me fournir aussi)
- Sur la même page que la tâche que nous traitons : les différentes cartes avec les points de difficulté s'affichent (tu les récupéreras dans le dossier dont je parle plus bas)
J'ai l'entièreté des cartes en .svg dans un dossier nommé "cartes", les cartes s'appellent cartes_0.svg, cartes_40.svg...
- Sur cette même page, au dessus des cartes, le nom de chaque joueur tour à tour 
Une fois que tous les joueurs ont choisi une carte, et que les règles sont respectées, nous passons à la tâche 2
a ce moment, la difficulté de la tâche 1 est ajoutée au fichier json pour pouvoir le garder en mémoire


Je veux que chaque fichier soit complet, avec le code fonctionnel, et que tous les fichiers fonctionnent entre eux.
N'hésite pas à m'envoyer les différents fichiers en plusieurs réponses.

Voici les consignes données par le professeur : 
Présentation du sujet
Application de planning poker
L'objectif de l'application est de permettre à des joueurs de faire une partie de planning poker, en respectant les règles vues en cours.
L'application peut être à distance (chaque joueur utilise son propre dispositif) ou locale (les joueurs choisissent chacun à leur tour leurs cartes).
Un menu permet de décider du nombre de joueurs et de rentrer un pseudo pour chacun des joueurs. Le menu doit aussi permettre de choisir parmi différentes règles de planning poker (règles strictes, moyenne, médiane, etc.)
On doit pouvoir entrer une liste de fonctionnalités (backlog) en JSON (vous êtes libre d'utiliser la structure que vous souhaitez).
Une fois que chacun à voté, l'application valide ou non la fonctionnalité en fonction des règles choisies via le menu. Si la fonctionnalités n'est pas validée, on recommence le vote.
Lorsque tout le backlog est validé, l'application enregistre un fichier JSON avec, pour chaque fonctionnalité, la difficulté estimée par l'équipe.
Note : Si tous les joueurs utilisent la carte café, l'application doit enregistrer un fichier JSON avec l'état d'avancement du backlog. Ce fichier JSON doit pouvoir être chargé via le menu pour "reprendre" une partie.
Note 2 : Vous êtes très fortement encouragés à ajouter des fonctionnalités qui vous semblent utiles au bon déroulement du planning poker (chronomètre, espace de discussion, etc.)
Vous devez, dans votre projet, utiliser au moins trois des design patterns présentés en cours. Vous devez justifier l'utilisation de ces designs patterns dans votre rapport, ainsi que de la façon dont vous les avez implémenté dans votre projet.

Modes de jeu :
Vous devez implémenter obligatoirement le mode de jeu strict (correspondant à l'unanimité) et un mode parmi les suivants :

Moyenne
Médiane
Majorité absolue
Majorité relative
Pour le mode de jeu strict, les joueurs votent jusqu'à ce que l'unanimité soit acquise.

Pour les autres modes, le premier tour de chaque tâche se joue quand même sur l'unanimité. ce n'est qu'à partir des tours suivants que l'on utilise la moyenne/médiane/majorité. Ce choix permet d'avoir au moins un temps de discussion si les joueurs ne sont pas d'accord en premier lieu.



voici mon fichier backlog.json : 

{
    "taches": [
      {
        "id": 1,
        "nom": "Tâche 1",
        "description": "Description de la tâche 1",
        "difficulte" : "" 
      },
      {
        "id": 2,
        "nom": "Tâche 2",
        "description": "Description de la tâche 2",
        "difficulte" : "" 
      },
      {
        "id": 3,
        "nom": "Tâche 3",
        "description": "Description de la tâche 3",
        "difficulte" : "" 
      }
    ]
  }
  





on va y aller par étape : 

1 : tu vas me donner les fichiers que je dois créer
ensuite tu attends ma réponses

2: tu vas me donner les fichiers 1 par un quand je te dirais leur nom, il faut que les fichiers soient complets et prêt à être executé sans erreur